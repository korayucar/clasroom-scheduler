/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2014-04-15 19:10:39 UTC)
 * on 2014-04-21 at 19:27:47 UTC 
 * Modify at your own risk.
 */

package com.appspot.fancyscheduler.attendancepoint;

/**
 * Service definition for Attendancepoint (v2).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link AttendancepointRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Attendancepoint extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.16.0-rc of the attendancepoint library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://fancyscheduler.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "attendancepoint/v2/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Attendancepoint(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Attendancepoint(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the AttendeeManager collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Attendancepoint attendancepoint = new Attendancepoint(...);}
   *   {@code Attendancepoint.AttendeeManager.List request = attendancepoint.attendeeManager().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public AttendeeManager attendeeManager() {
    return new AttendeeManager();
  }

  /**
   * The "attendeeManager" collection of methods.
   */
  public class AttendeeManager {

    /**
     * Create a request for the method "attendeeManager.addAttendance".
     *
     * This request holds the parameters needed by the the attendancepoint server.  After setting any
     * optional parameters, call the {@link AddAttendance#execute()} method to invoke the remote
     * operation.
     *
     * @param mail
     * @param time
     * @param status
     * @param classcode
     * @return the request
     */
    public AddAttendance addAttendance(java.lang.String mail, java.lang.Long time, java.lang.String status, java.lang.Integer classcode) throws java.io.IOException {
      AddAttendance result = new AddAttendance(mail, time, status, classcode);
      initialize(result);
      return result;
    }

    public class AddAttendance extends AttendancepointRequest<Void> {

      private static final String REST_PATH = "addAttendance/{mail}/{time}/{status}/{classcode}";

      /**
       * Create a request for the method "attendeeManager.addAttendance".
       *
       * This request holds the parameters needed by the the attendancepoint server.  After setting any
       * optional parameters, call the {@link AddAttendance#execute()} method to invoke the remote
       * operation. <p> {@link AddAttendance#initialize(com.google.api.client.googleapis.services.Abstra
       * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param mail
       * @param time
       * @param status
       * @param classcode
       * @since 1.13
       */
      protected AddAttendance(java.lang.String mail, java.lang.Long time, java.lang.String status, java.lang.Integer classcode) {
        super(Attendancepoint.this, "POST", REST_PATH, null, Void.class);
        this.mail = com.google.api.client.util.Preconditions.checkNotNull(mail, "Required parameter mail must be specified.");
        this.time = com.google.api.client.util.Preconditions.checkNotNull(time, "Required parameter time must be specified.");
        this.status = com.google.api.client.util.Preconditions.checkNotNull(status, "Required parameter status must be specified.");
        this.classcode = com.google.api.client.util.Preconditions.checkNotNull(classcode, "Required parameter classcode must be specified.");
      }

      @Override
      public AddAttendance setAlt(java.lang.String alt) {
        return (AddAttendance) super.setAlt(alt);
      }

      @Override
      public AddAttendance setFields(java.lang.String fields) {
        return (AddAttendance) super.setFields(fields);
      }

      @Override
      public AddAttendance setKey(java.lang.String key) {
        return (AddAttendance) super.setKey(key);
      }

      @Override
      public AddAttendance setOauthToken(java.lang.String oauthToken) {
        return (AddAttendance) super.setOauthToken(oauthToken);
      }

      @Override
      public AddAttendance setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AddAttendance) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AddAttendance setQuotaUser(java.lang.String quotaUser) {
        return (AddAttendance) super.setQuotaUser(quotaUser);
      }

      @Override
      public AddAttendance setUserIp(java.lang.String userIp) {
        return (AddAttendance) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String mail;

      /**

       */
      public java.lang.String getMail() {
        return mail;
      }

      public AddAttendance setMail(java.lang.String mail) {
        this.mail = mail;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long time;

      /**

       */
      public java.lang.Long getTime() {
        return time;
      }

      public AddAttendance setTime(java.lang.Long time) {
        this.time = time;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String status;

      /**

       */
      public java.lang.String getStatus() {
        return status;
      }

      public AddAttendance setStatus(java.lang.String status) {
        this.status = status;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Integer classcode;

      /**

       */
      public java.lang.Integer getClasscode() {
        return classcode;
      }

      public AddAttendance setClasscode(java.lang.Integer classcode) {
        this.classcode = classcode;
        return this;
      }

      @Override
      public AddAttendance set(String parameterName, Object value) {
        return (AddAttendance) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "attendeeManager.getPerson".
     *
     * This request holds the parameters needed by the the attendancepoint server.  After setting any
     * optional parameters, call the {@link GetPerson#execute()} method to invoke the remote operation.
     *
     * @param mail
     * @return the request
     */
    public GetPerson getPerson(java.lang.String mail) throws java.io.IOException {
      GetPerson result = new GetPerson(mail);
      initialize(result);
      return result;
    }

    public class GetPerson extends AttendancepointRequest<com.appspot.fancyscheduler.attendancepoint.model.Person> {

      private static final String REST_PATH = "person/{mail}";

      /**
       * Create a request for the method "attendeeManager.getPerson".
       *
       * This request holds the parameters needed by the the attendancepoint server.  After setting any
       * optional parameters, call the {@link GetPerson#execute()} method to invoke the remote
       * operation. <p> {@link
       * GetPerson#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param mail
       * @since 1.13
       */
      protected GetPerson(java.lang.String mail) {
        super(Attendancepoint.this, "GET", REST_PATH, null, com.appspot.fancyscheduler.attendancepoint.model.Person.class);
        this.mail = com.google.api.client.util.Preconditions.checkNotNull(mail, "Required parameter mail must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetPerson setAlt(java.lang.String alt) {
        return (GetPerson) super.setAlt(alt);
      }

      @Override
      public GetPerson setFields(java.lang.String fields) {
        return (GetPerson) super.setFields(fields);
      }

      @Override
      public GetPerson setKey(java.lang.String key) {
        return (GetPerson) super.setKey(key);
      }

      @Override
      public GetPerson setOauthToken(java.lang.String oauthToken) {
        return (GetPerson) super.setOauthToken(oauthToken);
      }

      @Override
      public GetPerson setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetPerson) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetPerson setQuotaUser(java.lang.String quotaUser) {
        return (GetPerson) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetPerson setUserIp(java.lang.String userIp) {
        return (GetPerson) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String mail;

      /**

       */
      public java.lang.String getMail() {
        return mail;
      }

      public GetPerson setMail(java.lang.String mail) {
        this.mail = mail;
        return this;
      }

      @Override
      public GetPerson set(String parameterName, Object value) {
        return (GetPerson) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "attendeeManager.hello".
     *
     * This request holds the parameters needed by the the attendancepoint server.  After setting any
     * optional parameters, call the {@link Hello#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Hello hello() throws java.io.IOException {
      Hello result = new Hello();
      initialize(result);
      return result;
    }

    public class Hello extends AttendancepointRequest<Void> {

      private static final String REST_PATH = "hello";

      /**
       * Create a request for the method "attendeeManager.hello".
       *
       * This request holds the parameters needed by the the attendancepoint server.  After setting any
       * optional parameters, call the {@link Hello#execute()} method to invoke the remote operation.
       * <p> {@link
       * Hello#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Hello() {
        super(Attendancepoint.this, "POST", REST_PATH, null, Void.class);
      }

      @Override
      public Hello setAlt(java.lang.String alt) {
        return (Hello) super.setAlt(alt);
      }

      @Override
      public Hello setFields(java.lang.String fields) {
        return (Hello) super.setFields(fields);
      }

      @Override
      public Hello setKey(java.lang.String key) {
        return (Hello) super.setKey(key);
      }

      @Override
      public Hello setOauthToken(java.lang.String oauthToken) {
        return (Hello) super.setOauthToken(oauthToken);
      }

      @Override
      public Hello setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Hello) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Hello setQuotaUser(java.lang.String quotaUser) {
        return (Hello) super.setQuotaUser(quotaUser);
      }

      @Override
      public Hello setUserIp(java.lang.String userIp) {
        return (Hello) super.setUserIp(userIp);
      }

      @Override
      public Hello set(String parameterName, Object value) {
        return (Hello) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "attendeeManager.listPerson".
     *
     * This request holds the parameters needed by the the attendancepoint server.  After setting any
     * optional parameters, call the {@link ListPerson#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public ListPerson listPerson() throws java.io.IOException {
      ListPerson result = new ListPerson();
      initialize(result);
      return result;
    }

    public class ListPerson extends AttendancepointRequest<com.appspot.fancyscheduler.attendancepoint.model.PersonCollection> {

      private static final String REST_PATH = "person";

      /**
       * Create a request for the method "attendeeManager.listPerson".
       *
       * This request holds the parameters needed by the the attendancepoint server.  After setting any
       * optional parameters, call the {@link ListPerson#execute()} method to invoke the remote
       * operation. <p> {@link
       * ListPerson#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected ListPerson() {
        super(Attendancepoint.this, "GET", REST_PATH, null, com.appspot.fancyscheduler.attendancepoint.model.PersonCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public ListPerson setAlt(java.lang.String alt) {
        return (ListPerson) super.setAlt(alt);
      }

      @Override
      public ListPerson setFields(java.lang.String fields) {
        return (ListPerson) super.setFields(fields);
      }

      @Override
      public ListPerson setKey(java.lang.String key) {
        return (ListPerson) super.setKey(key);
      }

      @Override
      public ListPerson setOauthToken(java.lang.String oauthToken) {
        return (ListPerson) super.setOauthToken(oauthToken);
      }

      @Override
      public ListPerson setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (ListPerson) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public ListPerson setQuotaUser(java.lang.String quotaUser) {
        return (ListPerson) super.setQuotaUser(quotaUser);
      }

      @Override
      public ListPerson setUserIp(java.lang.String userIp) {
        return (ListPerson) super.setUserIp(userIp);
      }

      @Override
      public ListPerson set(String parameterName, Object value) {
        return (ListPerson) super.set(parameterName, value);
      }
    }

  }

  /**
   * Create a request for the method "addperson".
   *
   * This request holds the parameters needed by the the attendancepoint server.  After setting any
   * optional parameters, call the {@link Addperson#execute()} method to invoke the remote operation.
   *
   * @param mail
   * @return the request
   */
  public Addperson addperson(java.lang.String mail) throws java.io.IOException {
    Addperson result = new Addperson(mail);
    initialize(result);
    return result;
  }

  public class Addperson extends AttendancepointRequest<com.appspot.fancyscheduler.attendancepoint.model.Person> {

    private static final String REST_PATH = "person/{mail}";

    /**
     * Create a request for the method "addperson".
     *
     * This request holds the parameters needed by the the attendancepoint server.  After setting any
     * optional parameters, call the {@link Addperson#execute()} method to invoke the remote
     * operation. <p> {@link
     * Addperson#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param mail
     * @since 1.13
     */
    protected Addperson(java.lang.String mail) {
      super(Attendancepoint.this, "POST", REST_PATH, null, com.appspot.fancyscheduler.attendancepoint.model.Person.class);
      this.mail = com.google.api.client.util.Preconditions.checkNotNull(mail, "Required parameter mail must be specified.");
    }

    @Override
    public Addperson setAlt(java.lang.String alt) {
      return (Addperson) super.setAlt(alt);
    }

    @Override
    public Addperson setFields(java.lang.String fields) {
      return (Addperson) super.setFields(fields);
    }

    @Override
    public Addperson setKey(java.lang.String key) {
      return (Addperson) super.setKey(key);
    }

    @Override
    public Addperson setOauthToken(java.lang.String oauthToken) {
      return (Addperson) super.setOauthToken(oauthToken);
    }

    @Override
    public Addperson setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Addperson) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Addperson setQuotaUser(java.lang.String quotaUser) {
      return (Addperson) super.setQuotaUser(quotaUser);
    }

    @Override
    public Addperson setUserIp(java.lang.String userIp) {
      return (Addperson) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String mail;

    /**

     */
    public java.lang.String getMail() {
      return mail;
    }

    public Addperson setMail(java.lang.String mail) {
      this.mail = mail;
      return this;
    }

    @Override
    public Addperson set(String parameterName, Object value) {
      return (Addperson) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Attendancepoint}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Attendancepoint}. */
    @Override
    public Attendancepoint build() {
      return new Attendancepoint(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link AttendancepointRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setAttendancepointRequestInitializer(
        AttendancepointRequestInitializer attendancepointRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(attendancepointRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
